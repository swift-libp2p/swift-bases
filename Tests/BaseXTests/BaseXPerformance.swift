//
//  BaseXPerformance.swift
//  
//
//  Created by Brandon Toms on 5/1/22.
//

import XCTest
@testable import BaseX

class BaseXPerformance: XCTestCase {

    let testString = "yes mani !"
    
    let largeTestString = "d5150804429b010a260024080112204a047bc7b58eb83457d338ba7d33d40f15dc47612749505fddce74d627ea82841208047c3170ba0604021214290064ff9b00000000000000007c3170ba0604021208047f000001060fa112142900000000000000000000000000000001060fa1120b047f00000191020fa1cc031217290000000000000000000000000000000191020fa1cc03120b047c3170ba9102084acc034285010a260024080112204aa5d05ca91e41fd49e4b0f59887fde0355fa71cd20b3d94a1b4676bce2ea292120b047f00000191020fa1cc031217290000000000000000000000000000000191020fa1cc03120b04621f10cb9102cfaccc03120804621f10cb06c04f1208047f000001060fa112142900000000000000000000000000000001060fa142c7010a2212202131fa8a8ffa0410a6c7e5d6d099886817a4796b204712fcd0ee18e5de0117c41208047f000001060fa11217290064ff9b00000000000000006b144ff691020fa1cc031208040a0044c9060fa11214290064ff9b00000000000000006b144ff6060fa1120b046b144ff691020fa1cc031208046b144ff6060fa1120b040a0044c991020fa1cc0312142900000000000000000000000000000001060fa11217290000000000000000000000000000000191020fa1cc03120b047f00000191020fa1cc034292010a260024080112206ad3d604bfd538cd9723f44dc9f13ac50bcf8171f4c07395430233902fc9acb81214292604138045d13c000000000000000003060fa11216292604138045d13c000000000000000003060fa2dd031217292604138045d13c00000000000000000391020fa1cc03120804934b4eff060fa1120a04934b4eff060fa2dd03120b04934b4eff91020fa1cc03424e0a22122057ccbe4434ce993202c73a39e258e603545ed9fc5522553fc5fa9f894f2bb68b12080425bb7417060fa31208040a080001060fa3121429200141d0000a69170000000000000001060fa3429c010a260024080112201ca69996ad7698005f2b7a5d0f29e8955e25fcce1950b319120d1b8fb78b8877120b047f00000191020fa1cc031217290000000000000000000000000000000191020fa1cc031208044a8db10c060fa1120b044a8db10c91020fa1cc03120b04c113ce3991023262cc03120804c113ce39060fa11208047f000001060fa112142900000000000000000000000000000001060fa1426d0a260024080112201632faccf70bf23687114c0ab8178b0747192c87c87d1007f26475765ab3660d1208047f000001067538120b04ac1f06c091027538cc03120b047f00000191027538cc03120b040390662a91027538cc031208040390662a067538120804ac1f06c006753842c7010a221220763ba1105c85b6dccce95ae25379654aac71503e85546061220f0052316c5db41217290064ff9b00000000000000003652b7b691020fa1cc031208040a004582060fa1120b040a00458291020fa1cc03120b043652b7b691020fa1cc031208043652b7b6060fa112142900000000000000000000000000000001060fa11217290000000000000000000000000000000191020fa1cc031214290064ff9b00000000000000003652b7b6060fa1120b047f00000191020fa1cc031208047f000001060fa1426d0a26002408011220e0a2f1884b346dbff64cf3d4f5bac75d0c176dd256c1f4c9c7002f9237535506120b047f00000191020fa1cc03120804ca3deef6060fa1120b04ca3deef691020fa1cc03120804ac110006060fa11208047f000001060fa1120b04ac11000691020fa1cc034285010a26002408011220f3a57687cba8606f0e7043343a446581db5ef478ee6aac13b29f3bea51841ecc1208047f000001060fa112142900000000000000000000000000000001060fa1120b047f00000191020fa1cc031217290000000000000000000000000000000191020fa1cc031208044101be46060fa1120b044101be4691020fa1cc03429e010a260024080112205e7e61f7ea8c0b274d43cedbc3448642672b7793ca0629281bad9378502b7f911217290064ff9b00000000000000008fc632ef91020fa1cc031208048fc632ef060fa11208047f000001060fa112142900000000000000000000000000000001060fa1120b048fc632ef91020fa1cc03120b047f00000191020fa1cc031217290000000000000000000000000000000191020fa1cc0342b0010a22122012772f36841ed33e284fa7dbed15b7d023b1e834f4ceea6c33a12e92388d4014120b047f00000191020fa1cc03120b04a7565a7d91020fa1cc031217292a02c20720265530851300000000000591020fa1cc031217290000000000000000000000000000000191020fa1cc031214292a02c207202655308513000000000005060fa112142900000000000000000000000000000001060fa1120804a7565a7d060fa11208047f000001060fa142b4010a26002408011220dc26a854d728d28d1ca05db8a9511b3425bc1199b9cc02e9ef68291a9a1b03be120804a5160044060fa112142900000000000000000000000000000001060fa11217290000000000000000000000000000000191020fa1cc031208047f000001060fa11214292604a880040000d0000000001f9cc001060fa1120b04a516004491020fa1cc03120b047f00000191020fa1cc031217292604a880040000d0000000001f9cc00191020fa1cc03426b0a2600240801122089ea315f746065e455b33bacafbc06d2cfe40a2d20a447bfe8788e19661e39481217290000000000000000000000000000000191020fa1cc03120804c063af77060fa11208047f000001060fa112142900000000000000000000000000000001060fa1429e010a2600240801122074f605ddf0502b5de707c3781aa846fd8163fcbc7d5c3d01f9f6afaf6d2fe52b12142900000000000000000000000000000001060fa11217290064ff9b00000000000000008b3b27fa91020fa1cc03120b048b3b27fa91020fa1cc03120b047f00000191020fa1cc031217290000000000000000000000000000000191020fa1cc031208048b3b27fa060fa11208047f000001060fa1429a010a22122021a2dbb58f3e309af031694ae4cbf9b44705a5250b22bb5e14ca3c85dfc534da120804ac5d3559060fa11208047f000001060fa112142900000000000000000000000000000001060fa1120b04ac5d355991020fa1cc03120b047f00000191020fa1cc031217290000000000000000000000000000000191020fa1cc031217290064ff9b0000000000000000ac5d355991020fa1cc0342380a2212200cf64060bae79d85ad0b8805954a390c4d60ad2b3e7d855c3cbdd665dc47eaca1208047f000001068727120804b3553ccd06872742520a22122072de493c01ab64d8bfb48f708d0a0d0226a6ae421e1696fcaa90b2794ac51d451208042eb919c906e602120b042eb919c9910287d8cc03120804c0a8006406d389120b04c0a800649102bf6acc0342520a2212206156d26f43d53b9702b9c1599deb87f603633b69b7b94f87c57d0f4895596213120804d3d9933b0687fb120b04d3d9933b9102e177cc03120804ac1e011906bd0f120b04ac1e01199102a98ecc034292010a2600240801122092322d34a9e4655bd8b0eb425086ecf65d61fd7ddf08ab342cdc5df45bd9f8b3120804912859f1060fa1120a04912859f1060fa2dd03120b04912859f191020fa1cc031214292604138045f13f000000000000000025060fa11216292604138045f13f000000000000000025060fa2dd031217292604138045f13f00000000000000002591020fa1cc035001"
    
    override func setUpWithError() throws {
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }

    override func tearDownWithError() throws {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
    }

    /// measured [Time, seconds] average: 0.000,
    /// relative standard deviation: 60.503%,
    /// values: [0.001343, 0.000392, 0.000393, 0.000374, 0.000375, 0.000378, 0.000379, 0.000379, 0.000373, 0.000386]
    func testBase16Example() throws {
        // This is an example of a performance test case.
        self.measure {
            // Put the code you want to measure the time of here.
            let baseEncoded = try! BaseX.encode(testString, into: .base16Hex)
            XCTAssertEqual(try! BaseX.decode(baseEncoded, as: .base16Hex), testString)
            
            XCTAssertEqual(try! BaseX.decode("796573206d616e692021", as: .base16Hex), testString)
        }
    }
    
    /// measured [Time, seconds] average: 0.000,
    /// relative standard deviation: 191.024%,
    /// values: [0.000468, 0.000033, 0.000027, 0.000025, 0.000024, 0.000024, 0.000024, 0.000024, 0.000024, 0.000024]
    //func testBase16ALTExample() throws {
    //    // This is an example of a performance test case.
    //    self.measure {
    //        // Put the code you want to measure the time of here.
    //        let baseEncoded = try! BaseX.encodeALT(testString, into: .base16Hex)
    //        XCTAssertEqual(try! BaseX.decodeALT(baseEncoded, as: .base16Hex), testString)
    //
    //        XCTAssertEqual(try! BaseX.decodeALT("796573206d616e692021", as: .base16Hex), testString)
    //    }
    //}
    
    /// CryptoSwifts hex algorithm is way faster (averaging 0.002s)
    func testBase16LargeExample() throws {
        // This is an example of a performance test case.
        self.measure {
            // Put the code you want to measure the time of here.
            let data = try! BaseX.decode(largeTestString, as: .base16Hex)
            XCTAssertEqual(BaseX.encode(data, into: .base16Hex), largeTestString)
        }
    }
    
    /// Our previous, general BaseX logic is incredibly slow with larger values (averages 7.33 seconds on the largeTestString)
    /// measured [Time, seconds] average: 7.227,
    /// relative standard deviation: 0.527%,
    /// values: [7.197384, 7.232839, 7.247377, 7.234434, 7.164804, 7.193941, 7.280049, 7.296718, 7.216844, 7.208051]
    //func testBase16ALTLargeExample() throws {
    //    // This is an example of a performance test case.
    //    self.measure {
    //        // Put the code you want to measure the time of here.
    //        let data = try! BaseX.decodeALT(largeTestString, as: .base16Hex)
    //        XCTAssertEqual(BaseX.encodeALT(data, into: .base16Hex), largeTestString)
    //    }
    //}
    
}
